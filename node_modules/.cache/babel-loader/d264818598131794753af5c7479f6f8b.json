{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToRgb = hexToRgb;\nexports.rgbToHex = rgbToHex;\nexports.hslToRgb = hslToRgb;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _utils = require(\"@material-ui/utils\");\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\") : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1);\n  var colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].substr(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: unsupported `\".concat(colorSpace, \"` color space.\\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.\") : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values,\n    colorSpace: colorSpace\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type,\n      colorSpace = color.colorSpace;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = \"\".concat(colorSpace, \" \").concat(values.join(' '));\n  } else {\n    values = \"\".concat(values.join(', '));\n  }\n\n  return \"\".concat(type, \"(\").concat(values, \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = \"/\".concat(value);\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (var _i = 0; _i < 3; _i += 1) {\n      color.values[_i] += (1 - color.values[_i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/Users/charlyagudelo/Documents/proyDanny/front_Udistrital/node_modules/@material-ui/core/styles/colorManipulator.js"],"names":["Object","defineProperty","exports","value","hexToRgb","rgbToHex","hslToRgb","decomposeColor","recomposeColor","getContrastRatio","getLuminance","emphasize","fade","darken","lighten","_utils","require","clamp","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","concat","Math","color","substr","re","RegExp","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","indexOf","_decomposeColor","values","_color","h","s","l","a","f","k","type","rgb","push","charAt","marker","substring","Error","formatMuiErrorMessage","colorSpace","split","shift","_formatMuiErrorMessage","parseFloat","i","foreground","background","lumA","lumB","val","pow","Number","toFixed","coefficient","_i"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToRgb = hexToRgb;\nexports.rgbToHex = rgbToHex;\nexports.hslToRgb = hslToRgb;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _utils = require(\"@material-ui/utils\");\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\") : (0, _utils.formatMuiErrorMessage)(9, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1);\n  var colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].substr(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: unsupported `\".concat(colorSpace, \"` color space.\\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.\") : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values,\n    colorSpace: colorSpace\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type,\n      colorSpace = color.colorSpace;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = \"\".concat(colorSpace, \" \").concat(values.join(' '));\n  } else {\n    values = \"\".concat(values.join(', '));\n  }\n\n  return \"\".concat(type, \"(\").concat(values, \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = \"/\".concat(value);\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (var _i = 0; _i < 3; _i += 1) {\n      color.values[_i] += (1 - color.values[_i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"]},"metadata":{},"sourceType":"script"}