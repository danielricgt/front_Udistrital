{"ast":null,"code":"/* eslint-disable @typescript-eslint/naming-convention, consistent-return, jsx-a11y/no-noninteractive-tabindex */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, elementAcceptingRef } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\n/**\n * Utility component that locks focus inside the component.\n */\n\nfunction Unstable_TrapFocus(props) {\n  var children = props.children,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      getDoc = props.getDoc,\n      isEnabled = props.isEnabled,\n      open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var reactFocusEventTarget = React.useRef(null); // This variable is useful when disableAutoFocus is true.\n  // It waits for the active element to move into the component to activate.\n\n  var activated = React.useRef(false);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(children.ref, rootRef);\n  var prevOpenRef = React.useRef();\n  React.useEffect(function () {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && typeof window !== 'undefined' && !disableAutoFocus) {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(function () {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React.useEffect(function () {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current);\n\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n\n    return function () {\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    }; // Missing `disableRestoreFocus` which is fine.\n    // We don't support changing that prop on an open TrapFocus\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n  React.useEffect(function () {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current);\n\n    var contain = function contain(nativeEvent) {\n      var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (!rootElement.contains(doc.activeElement)) {\n        // if the focus event is not coming from inside the children's react tree, reset the refs\n        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {\n          reactFocusEventTarget.current = null;\n        } else if (reactFocusEventTarget.current !== null) {\n          return;\n        }\n\n        if (!activated.current) {\n          return;\n        }\n\n        rootElement.focus();\n      } else {\n        activated.current = true;\n      }\n    };\n\n    var loopFocus = function loopFocus(nativeEvent) {\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (nativeEvent.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focusin', contain);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    // Instead, we can look if the active element was restored on the BODY element.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(function () {\n      if (doc.activeElement.tagName === 'BODY') {\n        contain();\n      }\n    }, 50);\n    return function () {\n      clearInterval(interval);\n      doc.removeEventListener('focusin', contain);\n      doc.removeEventListener('keydown', loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n\n  var onFocus = function onFocus(event) {\n    if (!activated.current) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    var childrenPropsHandler = children.props.onFocus;\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\"\n  }), /*#__PURE__*/React.cloneElement(children, {\n    ref: handleRef,\n    onFocus: onFocus\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\"\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document to consider.\n   * We use it to implement the restore focus between different browser documents.\n   */\n  getDoc: PropTypes.func.isRequired,\n\n  /**\n   * Do we still want to enforce the focus?\n   * This prop helps nesting TrapFocus elements.\n   */\n  isEnabled: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, focus will be locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;","map":{"version":3,"sources":["/Users/charlyagudelo/Documents/proyDanny/front_Udistrital/node_modules/@material-ui/core/esm/Unstable_TrapFocus/Unstable_TrapFocus.js"],"names":["React","PropTypes","exactProp","elementAcceptingRef","ownerDocument","useForkRef","Unstable_TrapFocus","props","children","_props$disableAutoFoc","disableAutoFocus","_props$disableEnforce","disableEnforceFocus","_props$disableRestore","disableRestoreFocus","getDoc","isEnabled","open","ignoreNextEnforceFocus","useRef","sentinelStart","sentinelEnd","nodeToRestore","reactFocusEventTarget","activated","rootRef","handleRef","ref","prevOpenRef","useEffect","current","window","activeElement","doc","contains","hasAttribute","process","env","NODE_ENV","console","error","join","setAttribute","focus","contain","nativeEvent","rootElement","hasFocus","target","loopFocus","key","shiftKey","addEventListener","interval","setInterval","tagName","clearInterval","removeEventListener","onFocus","event","relatedTarget","childrenPropsHandler","createElement","Fragment","tabIndex","cloneElement","propTypes","bool","func","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention, consistent-return, jsx-a11y/no-noninteractive-tabindex */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, elementAcceptingRef } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\n/**\n * Utility component that locks focus inside the component.\n */\n\nfunction Unstable_TrapFocus(props) {\n  var children = props.children,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      getDoc = props.getDoc,\n      isEnabled = props.isEnabled,\n      open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var reactFocusEventTarget = React.useRef(null); // This variable is useful when disableAutoFocus is true.\n  // It waits for the active element to move into the component to activate.\n\n  var activated = React.useRef(false);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(children.ref, rootRef);\n  var prevOpenRef = React.useRef();\n  React.useEffect(function () {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && typeof window !== 'undefined' && !disableAutoFocus) {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(function () {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    activated.current = !disableAutoFocus;\n  }, [disableAutoFocus, open]);\n  React.useEffect(function () {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current);\n\n    if (!rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      if (activated.current) {\n        rootRef.current.focus();\n      }\n    }\n\n    return function () {\n      // restoreLastFocus()\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          ignoreNextEnforceFocus.current = true;\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    }; // Missing `disableRestoreFocus` which is fine.\n    // We don't support changing that prop on an open TrapFocus\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open]);\n  React.useEffect(function () {\n    // We might render an empty child.\n    if (!open || !rootRef.current) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current);\n\n    var contain = function contain(nativeEvent) {\n      var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (!rootElement.contains(doc.activeElement)) {\n        // if the focus event is not coming from inside the children's react tree, reset the refs\n        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {\n          reactFocusEventTarget.current = null;\n        } else if (reactFocusEventTarget.current !== null) {\n          return;\n        }\n\n        if (!activated.current) {\n          return;\n        }\n\n        rootElement.focus();\n      } else {\n        activated.current = true;\n      }\n    };\n\n    var loopFocus = function loopFocus(nativeEvent) {\n      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (nativeEvent.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focusin', contain);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    // Instead, we can look if the active element was restored on the BODY element.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(function () {\n      if (doc.activeElement.tagName === 'BODY') {\n        contain();\n      }\n    }, 50);\n    return function () {\n      clearInterval(interval);\n      doc.removeEventListener('focusin', contain);\n      doc.removeEventListener('keydown', loopFocus, true);\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n\n  var onFocus = function onFocus(event) {\n    if (!activated.current) {\n      nodeToRestore.current = event.relatedTarget;\n    }\n\n    activated.current = true;\n    reactFocusEventTarget.current = event.target;\n    var childrenPropsHandler = children.props.onFocus;\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\"\n  }), /*#__PURE__*/React.cloneElement(children, {\n    ref: handleRef,\n    onFocus: onFocus\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\"\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n\n  /**\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\n   *\n   * Generally this should never be set to `true` as it makes the trap focus less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the trap focus will not restore focus to previously focused element once\n   * trap focus is hidden.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document to consider.\n   * We use it to implement the restore focus between different browser documents.\n   */\n  getDoc: PropTypes.func.isRequired,\n\n  /**\n   * Do we still want to enforce the focus?\n   * This prop helps nesting TrapFocus elements.\n   */\n  isEnabled: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, focus will be locked.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;"]},"metadata":{},"sourceType":"module"}